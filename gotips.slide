# Go Tips and Tricks

Lukáš Zapletal
15. May 2025
lzap@redhat.com

## Contents

- Random tips
- No particular order
- Assembled from other sources
- Links at the end
- Please contribute more tips: github.com/lzap/gotips

## Built-ins: print & println

Go has the following built-in functions: new, make, copy, len, cap, append, delete, close, panic, recover, complex, real, imag, print and println.

I find `println` very useful, no need to import.

.play print/main.go

## Getters and setters

Capital letter exports. Avoid `Get` prefix for getters.

.code getters/pkg.go

## Type inference and re-declaration

Go's type inference is generally quite powerful and convenient, but it does have some quirks and situations that can be surprising or require careful attention.

QUIZ: Find all compile errors.

.code -numbers -edit inference/main.go

## Type inference and re-declaration

Type inference will not work for `nil`.

.code -numbers inference/main.go HLnil

## Type inference and re-declaration

Re-declaration is allowed within the same block (or a child block) if the at least one new variable is re-declared but not all and the types do match.

.code -numbers inference/main.go HLerr

## Type conversion vs assertion

Conversions are evaluated during compilation, assertions during runtime.

QUIZ: What will this print?

.play -numbers type_ass/main.go

## Type aliases

Type alias is just another name for the same underlying type.

QUIZ: Find all compile errors.

.play -numbers -edit aliases/main.go HLalias

## Type aliases

Type aliases cannot have methods: `cannot define new methods on non-local type MyAlias`

.code -numbers aliases/main.go HLmethod

## Type aliases

The inferred type `int` does not match `MyInt` type: `interface conversion: interface {} is int, not main.MyInt`

.code -numbers aliases/main.go HLassert

## Loop variables

QUIZ: What this will print with Go 1.21 or older.

BONUS: What this will print with Go 1.22 or newer.

.play loopcopy/main.go /START OMIT/,/END OMIT/

## Loop variables

The fix is no longer needed but you can spot these in the wild.

.play loopcopy/fixed.go /START OMIT/,/END OMIT/ HLcopy

## Errors

Prefix error values with `Err` and suffix error types with `Error`. Prefer values over types or combination of light-weight type and values.

.code err_wrap/wrap.go /START OMIT/,/END OMIT/

Wrap carefully, avoid things like:

    error: some error: there was an error: io.EOF

## Errors

QUIZ: Find the bug.

.code err_wrap/process_bug.go /START OMIT/,/END OMIT/

## Errors

Error type checking is so much more complicated.

.code err_wrap/process.go /START OMIT/,/END OMIT/ HLref

## Errors

When `return` is not necessary errors. Also: `errors.Join` but returns newlines.

.play err_join/main.go /START OMIT/,/END OMIT/

Go team announced in June 2025 they will not be adding any error handling syntactic sugar anytime soon.

## Stack and heap

The rough estimation is that structs up to about 60-100 bytes are faster to be passed by value when they do not escape into heap.

.code stack/main.go

## Stack and heap

Variables can be allocated on stack. This depends on escape analysis of the compiler.

QUIZ: what will this print?

.play stack_alloc/main.go /START OMIT/,/END OMIT/

## Stack and heap

Go runtime creates local variables on stack, but as it grow it can move it to heap if needed.

.code stack_alloc/func.go

## Pointers

Grabbing a reference.

.play ptr_to/main.go

## Pointers

Dereferencing with an empty value.

.play ptr_from/main.go

## Pointers

Dereferencing with a default value.

.play ptr_or/main.go /START OMIT/,/END OMIT/

## Pointers

Value assignment with a default value.

.play ptr_cmp/main.go

## Defer

QUIZ: What will be on the `stderr`?

.play defer/order.go

## Defer

Return arguments can be named.

QUIZ: What will be on the `stderr`?

.play named/main.go

## Slices

QUIZ: What will be on the `stderr`?

.play slices_nil/main.go

## Memory

Expression `reflect.TypeOf(T).Size()` returns size of type T in bytes. Runs on 64bit platform.

QUIZ: What will be on the `stderr`?

.play mem_empty/main.go

## Memory

QUIZ: What will be on the `stderr`?

.play mem_align/main.go

## Memory

QUIZ: What will be on the `stderr`?

.play overflow/main.go

## Use export_test.go

File named `export_test.go` will be only available from `package_test` package. Useful for testing:

.code getters/export_test.go

.code getters/main_test.go

## Resources

- [Effective Go](https://go.dev/doc/effective_go)
- [Go Critic large struct rule](https://go-critic.com/overview.html#hugeparam)
- [Passing values by value or ref](https://blog.boot.dev/golang/pointers-faster-than-values/)

## TODO

Further ideas:

- new/make does not guarantee heap
- pass by copy or reference
- implicit interfaces, one method interfaces, unique feature of Go
- context
- logging log/slog, libs should have a simple interface, do not log AND return errors
- local variable in a loop always allocate, compiler will not optimize it
- testdata dir
